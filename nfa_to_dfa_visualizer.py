import streamlit as st
import graphviz
from collections import deque
from typing import Set, Dict, List, Tuple, Any
import time

class NFA:
    """–ù–µ–¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω–µ—á–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç"""
    
    def __init__(self, states: Set[int], alphabet: Set[str], 
                 transitions: Dict[int, Dict[str, List[int]]], 
                 start: int, final: Set[int]):
        self.states = states
        self.alphabet = alphabet
        self.transitions = transitions
        self.start = start
        self.final = final
    
    def epsilon_closure(self, states: Set[int]) -> Set[int]:
        """–≠–ø—Å–∏–ª–æ–Ω-–∑–∞–º—ã–∫–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
        closure = set(states)
        stack = list(states)
        
        while stack:
            state = stack.pop()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ø—Å–∏–ª–æ–Ω-–ø–µ—Ä–µ—Ö–æ–¥—ã (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
            if state in self.transitions and '' in self.transitions[state]:
                for next_state in self.transitions[state]['']:
                    if next_state not in closure:
                        closure.add(next_state)
                        stack.append(next_state)
        return closure
    
    def delta(self, state: int, symbol: str) -> Set[int]:
        """–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ù–ö–ê"""
        if state in self.transitions and symbol in self.transitions[state]:
            return set(self.transitions[state][symbol])
        return set()
    
    def move(self, states: Set[int], symbol: str) -> Set[int]:
        """–ü–µ—Ä–µ—Ö–æ–¥ –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ —Å–∏–º–≤–æ–ª—É"""
        result = set()
        for state in states:
            result.update(self.delta(state, symbol))
        return result
    
    def accepts(self, word: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ–ø—É—Å–∫–∞–µ—Ç –ª–∏ –ù–ö–ê —Å–ª–æ–≤–æ"""
        current_states = self.epsilon_closure({self.start})
        
        for char in word:
            if char not in self.alphabet:
                return False
            
            next_states = self.move(current_states, char)
            current_states = self.epsilon_closure(next_states)
            
            if not current_states:
                return False
        
        return bool(current_states & self.final)

class DFA:
    """–î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω–µ—á–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç"""
    
    def __init__(self, states: Set[frozenset], alphabet: Set[str],
                 transitions: Dict[frozenset, Dict[str, frozenset]],
                 start: frozenset, final: Set[frozenset]):
        self.states = states
        self.alphabet = alphabet
        self.transitions = transitions
        self.start = start
        self.final = final
    
    def accepts(self, word: str) -> Tuple[bool, List[frozenset]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ–ø—É—Å–∫–∞–µ—Ç –ª–∏ –î–ö–ê —Å–ª–æ–≤–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É"""
        state = self.start
        trace = [state]
        
        for char in word:
            if char not in self.alphabet:
                return False, trace
            
            if state not in self.transitions or char not in self.transitions[state]:
                return False, trace
            
            state = self.transitions[state][char]
            trace.append(state)
        
        return state in self.final, trace

def thompson_algorithm_visual(nfa: NFA) -> Tuple[DFA, List[Dict[str, Any]]]:
    """
    –ê–ª–≥–æ—Ä–∏—Ç–º –¢–æ–º–ø—Å–æ–Ω–∞ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π —à–∞–≥–æ–≤
    """
    steps = []
    
    # –û—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ö–æ–¥–∞ –≤ —à–∏—Ä–∏–Ω—É
    queue = deque()
    processed = set()
    
    # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –î–ö–ê
    start_dfa = frozenset([nfa.start])
    queue.append(start_dfa)
    processed.add(start_dfa)
    
    dfa_transitions = {}
    dfa_states = {start_dfa}
    
    step_count = 0
    
    while queue:
        step_count += 1
        current_state = queue.popleft()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–≥–µ
        step_info = {
            'step': step_count,
            'current_state': current_state,
            'queue': list(queue.copy()),
            'processed': processed.copy(),
            'transitions': {}
        }
        
        dfa_transitions[current_state] = {}
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –∞–ª—Ñ–∞–≤–∏—Ç–∞
        for symbol in nfa.alphabet:
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –∏–∑ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ç–µ–∫—É—â–µ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
            next_state = set()
            for state in current_state:
                next_state.update(nfa.delta(state, symbol))
            
            next_state_frozen = frozenset(next_state)
            dfa_transitions[current_state][symbol] = next_state_frozen
            
            step_info['transitions'][symbol] = {
                'from_state': current_state,
                'to_state': next_state_frozen,
                'is_new': next_state_frozen not in processed and bool(next_state),
                'is_empty': not bool(next_state)
            }
            
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            if next_state_frozen not in processed and next_state:
                queue.append(next_state_frozen)
                processed.add(next_state_frozen)
                dfa_states.add(next_state_frozen)
        
        steps.append(step_info)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–µ—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –î–ö–ê
    dfa_final = set()
    for state in dfa_states:
        if state & nfa.final:
            dfa_final.add(state)
    
    return DFA(dfa_states, nfa.alphabet, dfa_transitions, start_dfa, dfa_final), steps

def draw_nfa(nfa: NFA) -> graphviz.Digraph:
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ù–ö–ê"""
    dot = graphviz.Digraph('NFA')
    dot.attr(rankdir='LR')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    for state in nfa.states:
        if state in nfa.final:
            dot.node(str(state), shape='doublecircle')
        else:
            dot.node(str(state))
        
        if state == nfa.start:
            dot.node('start', shape='point')
            dot.edge('start', str(state))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã
    for from_state, transitions in nfa.transitions.items():
        for symbol, to_states in transitions.items():
            for to_state in to_states:
                dot.edge(str(from_state), str(to_state), label=symbol)
    
    return dot

def draw_dfa(dfa: DFA) -> graphviz.Digraph:
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –î–ö–ê"""
    dot = graphviz.Digraph('DFA')
    dot.attr(rankdir='LR')
    
    # –°–æ–∑–¥–∞–µ–º —É–¥–æ–±–Ω—ã–µ –∏–º–µ–Ω–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
    state_names = {}
    state_counter = 0
    for state in sorted(dfa.states, key=lambda s: (len(s), sorted(s))):
        if state == dfa.start:
            state_names[state] = f"q0"
        else:
            state_counter += 1
            state_names[state] = f"q{state_counter}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    for state in dfa.states:
        label = state_names[state]
        if state in dfa.final:
            dot.node(label, shape='doublecircle')
        else:
            dot.node(label)
        
        if state == dfa.start:
            dot.node(f'start_{label}', shape='point')
            dot.edge(f'start_{label}', label)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã
    for from_state, transitions in dfa.transitions.items():
        for symbol, to_state in transitions.items():
            from_label = state_names[from_state]
            to_label = state_names[to_state]
            dot.edge(from_label, to_label, label=symbol)
    
    return dot

def main():
    st.set_page_config(page_title="–ù–ö–ê –≤ –î–ö–ê –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä", layout="wide")
    
    st.title("üéØ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ù–ö–ê –≤ –î–ö–ê")
    st.subheader("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Ññ4 ‚Ä¢ –ê–ª–≥–æ—Ä–∏—Ç–º –¢–æ–º–ø—Å–æ–Ω–∞ ‚Ä¢ –í–∞—Ä–∏–∞–Ω—Ç 42")
    
    # –°–æ–∑–¥–∞–µ–º –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        st.subheader("–ò—Å—Ö–æ–¥–Ω—ã–π –ù–ö–ê ‚Ññ4")
        st.write("""
        **–Ø–∑—ã–∫**: —Å–ª–æ–≤–∞, –≥–¥–µ –∑–∞ 3 —Å–∏–º–≤–æ–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞ –µ—Å—Ç—å 'a'
        
        **–°–æ—Å—Ç–æ—è–Ω–∏—è**: {1, 2, 3, 4}  
        **–ê–ª—Ñ–∞–≤–∏—Ç**: {a, b}  
        **–ù–∞—á–∞–ª—å–Ω–æ–µ**: 1  
        **–ö–æ–Ω–µ—á–Ω–æ–µ**: 4
        """)
        
        st.subheader("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        test_word_input = st.text_input("–°–ª–æ–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "aaa")
        
        st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
        show_steps = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ—à–∞–≥–æ–≤–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", True)
        animation_speed = st.slider("–°–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ (—Å–µ–∫)", 0.5, 3.0, 1.0)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ù–ö–ê ‚Ññ4
    nfa_states = {1, 2, 3, 4}
    nfa_alphabet = {'a', 'b'}
    nfa_transitions = {
        1: {'a': [1, 2], 'b': [1]},
        2: {'a': [3], 'b': [3]},
        3: {'a': [4], 'b': [4]},
        4: {'a': [], 'b': []}
    }
    nfa_start = 1
    nfa_final = {4}
    
    nfa = NFA(nfa_states, nfa_alphabet, nfa_transitions, nfa_start, nfa_final)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    col1, col2 = st.columns(2)
    
    with col1:
        st.header("üî∑ –ò—Å—Ö–æ–¥–Ω—ã–π –ù–ö–ê")
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ù–ö–ê
        st.subheader("–ì—Ä–∞—Ñ –ù–ö–ê")
        nfa_graph = draw_nfa(nfa)
        st.graphviz_chart(nfa_graph)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ù–ö–ê
        st.subheader("–¢–∞–±–ª–∏—Ü–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ù–ö–ê")
        nfa_table_data = []
        for state in sorted(nfa.states):
            row = {"–°–æ—Å—Ç–æ—è–Ω–∏–µ": f"q{state}"}
            if state == nfa.start:
                row["–°–æ—Å—Ç–æ—è–Ω–∏–µ"] = f"‚Üí q{state}"
            if state in nfa.final:
                row["–°–æ—Å—Ç–æ—è–Ω–∏–µ"] = f"q{state}*"
                
            for symbol in sorted(nfa.alphabet):
                if state in nfa.transitions and symbol in nfa.transitions[state]:
                    row[symbol] = "{" + ", ".join(map(str, nfa.transitions[state][symbol])) + "}"
                else:
                    row[symbol] = "‚àÖ"
            nfa_table_data.append(row)
        
        st.table(nfa_table_data)
    
    with col2:
        st.header("üî∂ –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π –î–ö–ê")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ù–ö–ê –≤ –î–ö–ê
        dfa, steps = thompson_algorithm_visual(nfa)
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –î–ö–ê
        st.subheader("–ì—Ä–∞—Ñ –î–ö–ê")
        dfa_graph = draw_dfa(dfa)
        st.graphviz_chart(dfa_graph)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –î–ö–ê
        st.subheader("–¢–∞–±–ª–∏—Ü–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –î–ö–ê")
        
        # –°–æ–∑–¥–∞–µ–º —É–¥–æ–±–Ω—ã–µ –∏–º–µ–Ω–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –î–ö–ê
        state_mapping = {}
        state_counter = 0
        for state in sorted(dfa.states, key=lambda s: (len(s), sorted(s))):
            if state == dfa.start:
                state_mapping[state] = "q0"
            else:
                state_counter += 1
                state_mapping[state] = f"q{state_counter}"
        
        dfa_table_data = []
        for state in sorted(dfa.states, key=lambda s: (len(s), sorted(s))):
            row = {"–°–æ—Å—Ç–æ—è–Ω–∏–µ –î–ö–ê": state_mapping[state], "–ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ù–ö–ê": str(set(state))}
            
            if state == dfa.start:
                row["–°–æ—Å—Ç–æ—è–Ω–∏–µ –î–ö–ê"] = f"‚Üí {state_mapping[state]}"
            if state in dfa.final:
                row["–°–æ—Å—Ç–æ—è–Ω–∏–µ –î–ö–ê"] = f"{state_mapping[state]}*"
                
            for symbol in sorted(dfa.alphabet):
                if state in dfa.transitions and symbol in dfa.transitions[state]:
                    next_state = dfa.transitions[state][symbol]
                    row[symbol] = state_mapping[next_state]
                else:
                    row[symbol] = "‚àÖ"
            dfa_table_data.append(row)
        
        st.table(dfa_table_data)
    
    # –ü–æ—à–∞–≥–æ–≤–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
    if show_steps:
        st.header("üìä –ü–æ—à–∞–≥–æ–≤–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ù–ö–ê ‚Üí –î–ö–ê")
        
        step_container = st.container()
        with step_container:
            for i, step in enumerate(steps):
                with st.expander(f"–®–∞–≥ {step['step']}: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ {set(step['current_state'])}", expanded=i==0):
                    col_a, col_b, col_c = st.columns(3)
                    
                    with col_a:
                        st.write("**–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**")
                        st.info(f"{{ {', '.join(map(str, sorted(step['current_state'])))} }}")
                    
                    with col_b:
                        st.write("**–û—á–µ—Ä–µ–¥—å:**")
                        queue_states = [f"{{ {', '.join(map(str, sorted(state)))} }}" for state in step['queue']]
                        if queue_states:
                            st.write(" ‚Ä¢ " + "\n ‚Ä¢ ".join(queue_states))
                        else:
                            st.write("(–ø—É—Å—Ç–æ)")
                    
                    with col_c:
                        st.write("**–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ:**")
                        processed_states = [f"{{ {', '.join(map(str, sorted(state)))} }}" for state in step['processed']]
                        st.write(" ‚Ä¢ " + "\n ‚Ä¢ ".join(processed_states))
                    
                    st.write("**–ü–µ—Ä–µ—Ö–æ–¥—ã:**")
                    for symbol in sorted(nfa.alphabet):
                        trans_info = step['transitions'][symbol]
                        from_set = set(trans_info['from_state'])
                        to_set = set(trans_info['to_state'])
                        
                        if to_set:
                            status = "üÜï –ù–æ–≤–æ–µ" if trans_info['is_new'] else "‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ"
                            st.write(f"Œ¥({from_set}, '{symbol}') = {to_set} **{status}**")
                        else:
                            st.write(f"Œ¥({from_set}, '{symbol}') = ‚àÖ")
                    
                    time.sleep(animation_speed)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤
    st.header("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–æ–≤")
    
    test_col1, test_col2 = st.columns(2)
    
    with test_col1:
        st.subheader("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –ù–ö–ê")
        nfa_result = nfa.accepts(test_word_input)
        st.write(f"–°–ª–æ–≤–æ: `{test_word_input}`")
        if nfa_result:
            st.success(f"‚úÖ –ù–ö–ê –ü–†–ò–ù–ò–ú–ê–ï–¢ —Å–ª–æ–≤–æ")
        else:
            st.error(f"‚ùå –ù–ö–ê –û–¢–í–ï–†–ì–ê–ï–¢ —Å–ª–æ–≤–æ")
    
    with test_col2:
        st.subheader("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –î–ö–ê")
        dfa_result, trace = dfa.accepts(test_word_input)
        st.write(f"–°–ª–æ–≤–æ: `{test_word_input}`")
        
        if dfa_result:
            st.success(f"‚úÖ –î–ö–ê –ü–†–ò–ù–ò–ú–ê–ï–¢ —Å–ª–æ–≤–æ")
        else:
            st.error(f"‚ùå –î–ö–ê –û–¢–í–ï–†–ì–ê–ï–¢ —Å–ª–æ–≤–æ")
        
        st.write("**–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:**")
        trace_steps = []
        for i, state in enumerate(trace):
            if i == 0:
                trace_steps.append(f"–ù–∞—á–∞–ª–æ: {state_mapping[state]}")
            else:
                trace_steps.append(f"–ü–æ—Å–ª–µ '{test_word_input[i-1]}': {state_mapping[state]}")
        
        for step in trace_steps:
            st.write(f"‚Ä¢ {step}")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —è–∑—ã–∫–µ
    st.header("üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —è–∑—ã–∫–µ")
    
    info_col1, info_col2 = st.columns(2)
    
    with info_col1:
        st.subheader("–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ")
        st.code("(a|b)*a(a|b)(a|b)", language="regexp")
        st.write("""
        **–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:**
        - `(a|b)*` - –ª—é–±–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–æ–≤ a –∏ b
        - `a` - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª 'a' –∑–∞ 3 –ø–æ–∑–∏—Ü–∏–∏ –¥–æ –∫–æ–Ω—Ü–∞
        - `(a|b)` - –ª—é–±–æ–π —Å–∏–º–≤–æ–ª –Ω–∞ 2-–π –ø–æ–∑–∏—Ü–∏–∏ —Å –∫–æ–Ω—Ü–∞
        - `(a|b)` - –ª—é–±–æ–π —Å–∏–º–≤–æ–ª –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∑–∏—Ü–∏–∏
        """)
    
    with info_col2:
        st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")
        st.metric("–°–æ—Å—Ç–æ—è–Ω–∏—è –ù–ö–ê", len(nfa.states))
        st.metric("–°–æ—Å—Ç–æ—è–Ω–∏—è –î–ö–ê", len(dfa.states))
        st.metric("–ú–∞–∫—Å–∏–º—É–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π", 2**len(nfa.states))
        
        efficiency = len(dfa.states) / (2**len(nfa.states)) * 100
        st.metric("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", f"{efficiency:.1f}%")
        
        st.write("**–ü—Ä–∏–º–µ—Ä—ã —Å–ª–æ–≤:**")
        st.write("‚úÖ –ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è: `aaa`, `aba`, `aabbb`, `abab`, `aaaa`")
        st.write("‚ùå –û—Ç–≤–µ—Ä–≥–∞—é—Ç—Å—è: `bbb`, `ab`, `bbab`")

if __name__ == "__main__":
    main()